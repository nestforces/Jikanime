Skip to content
DEV Community
Search...

Log in
Create account

0
Jump to Comments
7
Save

Cover image for Deploying a Vite App to GitHub Pages using GitHub Actions: A Step-by-Step Guide
Dauda Lawal
Dauda Lawal
Posted on 19 Agu 2023 ‚Ä¢ Updated on 3 Sep 2023


5

1

1

1
Deploying a Vite App to GitHub Pages using GitHub Actions: A Step-by-Step Guide
#
webdev
#
react
#
developer
#
github
Table of Content
Introduction
Prerequisites
Project Setup
Configure Vite Config
Deploying the App
Make Changes and Push:
GitHub Actions Workflow:
Accessing Deployed App:
Conclusion
Introduction
Creating efficient workflows for deploying web applications is crucial in today's fast-paced development landscape. GitHub Pages and GitHub Actions have emerged as powerful tools for automating the deployment process. This guide aims to walk developers through deploying a Vite.js application to GitHub Pages using GitHub Actions.

By the end of this tutorial, you'll have a comprehensive understanding of how to set up an automated deployment pipeline for your Vite app.

Prerequisites
Before we dive into the deployment process, let's ensure you have the necessary tools and knowledge:

Vite.js Knowledge: Familiarity with Vite.js, a build tool that significantly enhances the development experience for modern web applications.

GitHub Account: A GitHub account is necessary to create repositories and set up GitHub Actions.

Git: Basic understanding of Git for version control.

Node.js and npm: Ensure you have Node.js and npm (Node Package Manager) installed on your machine.

Vite App: A Vite.js application ready to be deployed.

Project Setup
For the purpose of this guide, let's assume you have a Vite app named "MyViteApp" that you want to deploy to GitHub Pages.

Create a GitHub Repository:
Go to your GitHub account and create a new repository named "my-vite-app" (or any name you prefer).
Clone the repository to your local machine using git clone.

Setting up the Vite App:
Navigate to your project directory: cd my-vite-app.
Install dependencies: Run npm install to install the necessary packages.

Create a GitHub Action Workflow:
In your repository, create a new directory named .github/workflows. Inside this directory, create a YAML file named deploy.yml. This is where you'll define your GitHub Actions workflow.
Copy and paste the following code to your deploy.yml file:
# Simple workflow for deploying static content to GitHub Pages
name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload dist repository
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
Configure Vite Config
Add a property called base with the value of our repository name on vite.config.js or vite.config.ts. For example, if our repository name is my-vite-app, then we set the configuration as follows:
// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  base: '/my-vite-app/'
})

The deployment URL would be https://<OUR_GITHUB_USERNAME>.github.io/my-vite-app.

This workflow will run on every push to the main branch. It will first build the project, and then deploy it to GitHub pages.

Deploying the App
With the GitHub Actions workflow in place, here's how the deployment process works:

Make Changes and Push:
Make changes to your Vite app. Commit and push your changes to the main branch.
git add .
git commit -m "add deploy workflow"
git push

Commit the deployment workflow and push the changes to GitHub.

GitHub Actions Workflow:
GitHub Actions will automatically trigger the workflow defined in deploy.yml on the push event.

When you go to Actions and click on the recent workflow, you should see that it failed, because of missing permissions:

permissions

Don‚Äôt forget to enable the write permission. To fix that, go to Actions Settings, select Read and Write permissions and hit Save:

Read and Write permissions
Go back to Actions, click on failed workflow, and in the top-right corner, click on Re-run failed jobs

failed workflow

Accessing Deployed App: Once the workflow completes successfully, your Vite app will be deployed to the GitHub Pages URL you specified in the base field with the value of our repository name on vite.config.js. Access your deployed app at https://yourusername.github.io/my-vite-app.
Conclusion
Congratulations! You've successfully set up an automated deployment pipeline for your Vite.js app using GitHub Actions and deployed it to GitHub Pages. This streamlined workflow will save you time and effort, allowing you to focus on developing amazing web applications.

By following this guide, you've gained valuable insights into configuring GitHub Actions, creating a deployment workflow, and utilizing GitHub Pages for hosting your projects. This knowledge will empower you to streamline your development process and efficiently deploy your future web applications.

Thank you for giving your valuable time!

ü•∞ If you liked this article, consider sharing it.

Happy coding!

Don't forget to drop your comment.

Top comments (0)
Subscribe
pic
Add to the discussion
Code of Conduct ‚Ä¢ Report abuse
profile
Sentry
PROMOTED

Next.js

Next.js Error Monitoring ‚ö°Ô∏è
See the error and Next.js stack trace previously only visible in your user‚Äôs debug console. Apply source maps automatically to convert minified, compiled, or transpiled code back to its original form. Keep your Next.js source maps private by uploading them directly to Sentry.

Try Sentry

Read next
kartikmehta8 profile image
Building APIs with Django REST Framework
Kartik Mehta - Mar 10

apostrophecms profile image
Introducing the Apostrophe / Astro Integration
Apostrophe - Feb 16

andrewmat profile image
Um rant sobre API mal feita
Andr√© Matulionis - Mar 9

caloique profile image
SSO vs. Identity Federation: Optimizing Authentication for Modern Enterprises
Sama - Feb 27


Dauda Lawal
Follow
Web Developer| Technical Writer| Blockchain Enthusiast
LOCATION
Lagos, Nigeria
JOINED
3 Jul 2022
More from Dauda Lawal
How To Switch Between Node Versions On Windows
#webdev #node #javascript #developer
Essential Git Commands: Top 5 Every Developer Must Master
#webdev #programming #github #beginners
Understanding the Difference Between Primitive and Non-Primitive Data Types in JavaScript
#webdev #javascript #beginners #programming
profile
Commit
PROMOTED

The passive job-search tool is here
Is finding a job almost all undifferentiated heavy lifting?

Billboard image

Commit is an AI Agent that actually finds jobs for you
Commit‚Äôs AI Talent Agent does the career-advancement heavy lifting for you ‚Äì researching, finding, and applying to jobs that fit your developer profile perfectly.

It is still in beta, but we are fast-tracking DEV readers who sign up via this link:

Get started now!

# Simple workflow for deploying static content to GitHub Pages
name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload dist repository
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
DEV Community ‚Äî A constructive and inclusive social network for software developers. With you every step of your journey.

Home
Podcasts
Videos
Tags
DEV Help
Forem Shop
Advertise on DEV
DEV Showcase
About
Contact
Guides
Software comparisons
Code of Conduct
Privacy Policy
Terms of use
Built on Forem ‚Äî the open source software that powers DEV and other inclusive communities.

Made with love and Ruby on Rails. DEV Community ¬© 2016 - 2024.
